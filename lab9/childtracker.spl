//TO RUN: ./output/bin/standalone stream="SensorData.csv" details="ChildDetails.csv"
use spl.file::*; 
composite childtracker {
  graph 
    //read in both files as CSVs
    stream<rstring time, rstring sensorid, rstring childid, rstring fromroom, rstring toroom> SensorDataStream = FileSource() { 
      param 
        format : csv;
        hasHeaderLine : false;
        //defaultTuple : {time = "0", sensorid="default", childid="default", fromroom="default", toroom="default" };
        file : getSubmissionTimeValue("stream");
    }
   
    //output the location of each child every 5 minuets
    stream<rstring time, rstring id, rstring rm> LocationLogStream = Custom(SensorDataStream) {
      logic
        state: {

          //map of childid, {timestamp, room}
          mutable map<rstring, tuple<int64 time, rstring room>> tracks = {};

          mutable int64 previous = -1l;
        }

        onTuple SensorDataStream : {

          //parse the time into its components
          mutable int64 hour = -1;
          mutable int64 minute = -1;
          mutable float64 second = -1;

          list<rstring> components = tokenize(time, ":", false);
          parseNumber(hour,components[0]);
          parseNumber(minute,components[1]);
          parseNumber(second,components[2]);

          mutable int64 current = hour*60l*60l + minute*60l + (int64) second;
          tracks[childid] = {time=current, room=toroom};
          if (previous == -1l) {
            previous = current;
          } else {
            if (current - previous > 5l*60l) {
              //output!
             for (rstring ch in tracks) {
                /*mutable int64 t = tracks[k].time;
                int64 s = t % 60l;
                t = t / 60l;
                minute = t % 60l;
                t = t / 60l;
                hour = t;
                 
                mutable rstring timeasdf = "";
                if (hour < 10l) {
                  timeasdf += "0";
                }
                timeasdf += (rstring) hour + ":";
                if (minute < 10l) {
                  timeasdf += "0";
                }
                timeasdf += (rstring) minute + ":";
                if (s < 10l) {
                  timeasdf += "0";
                }
                timeasdf += (rstring) s;*/
                
                if (!(tracks[ch].room == "E")) {
                  submit({time=time, id=ch, rm=tracks[ch].room}, LocationLogStream);
                }
              }
              previous = current;
            } else {
              //nothing. just keep collecting.
            }
          }
        }          
    }

    //generate missing child reports if a child has not been seen for more than 15 minutes
    stream<rstring current, rstring id, rstring lastseen, rstring lastroom, rstring phone> MissingChildAlertStream = Custom(SensorDataStream) {
      logic
        state: {
          //map of childid, timestamp
          mutable map<rstring, int64> tracks = {};
          //map of childid, lastRoomSeen
          mutable map<rstring, rstring> rooms = {};
          //map of childid, alarmsounded
          mutable map<rstring, boolean> alarmed = {};
        }

        onTuple SensorDataStream : {
          //SensorDataStream: <rstring time, rstring sensorid, rstring childid, rstring fromroom, rstring toroom>
          mutable int64 hour = -1;
          mutable int64 minute = -1;
          mutable float64 second = -1;

          list<rstring> components = tokenize(time, ":", false);
          parseNumber(hour,components[0]);
          parseNumber(minute,components[1]);
          parseNumber(second,components[2]);

          mutable int64 current = hour*60l*60l + minute*60l + (int64) second;

          tracks[childid] = current;
          //this is how we know if we've already called the parent.
          alarmed[childid] = false;
          rooms[childid] = toroom;

          //gives us the value of the current time
          for (rstring ch in tracks) {
            //compare NOW to the last sensor datum for the child and see if it's been 15 minutes
            if (current - tracks[ch] > 15l*60l) {
              //danger!

              mutable int64 t = tracks[ch];
              int64 s = t % 60l;
              t = t / 60l;
              minute = t % 60l;
              t = t / 60l;
              hour = t;
               
              mutable rstring timeasdf = "";
              if (hour < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) hour + ":";
              if (minute < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) minute + ":";
              if (s < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) s;
              
              //mutable rstring asdf = "time last seen: " + timeasdf + ". current time is " + time;
              if (alarmed[ch]) {
                //an alarm has already been sounded
              } else {
                mutable int32 err = 0;
                mutable uint64 fp = fopen("ChildDetails.csv", "read", err);
                mutable rstring ph = "unknown";
                while (!feof(fp)) {
                  rstring contents = freadLine(fp, err);
                  list<rstring> token = csvTokenize(contents);
                  if (token[1] == ch) {
                    ph = token[4];
                    fclose(fp, err);
                    break;
                  }
                }
                if (!(rooms[ch] == "E")) {
                  //don't output if they exited
                  submit({current=time, id=ch, lastseen=timeasdf, lastroom=rooms[ch], phone=ph}, MissingChildAlertStream);
                }
                alarmed[ch] = true;
              }
            }
          }
        }          
    }

    stream<rstring time, rstring id, rstring phone> UnsafeRoomAlertStream = Custom(SensorDataStream) {
      logic
        state: {

          //map of childid, timestamp
          mutable map<rstring, int64> tracks = {};
          //map of childid, alarmsounded
          mutable map<rstring, boolean> alarmed = {};
        }

        onTuple SensorDataStream : {
          //SensorDataStream: <rstring time, rstring sensorid, rstring childid, rstring fromroom, rstring toroom>
          mutable int64 hour = -1;
          mutable int64 minute = -1;
          mutable float64 second = -1;

          list<rstring> components = tokenize(time, ":", false);
          parseNumber(hour,components[0]);
          parseNumber(minute,components[1]);
          parseNumber(second,components[2]);

          mutable int64 current = hour*60l*60l + minute*60l + (int64) second;
          if (toroom == "26") {
            //parse the time into its components
            tracks[childid] = current;
            alarmed[childid] = false;
          }
          if (fromroom == "26") {
            removeM(tracks, childid);
            removeM(alarmed, childid);
            //alarmed[childid] = false;
          }

          //gives us the value of the current time
          for (rstring ch in tracks) {

            //compare NOW to the entry point for the child and see if it's been 5 minutes
            if (current - tracks[ch] > 5l*60l) {
              //danger!

              mutable int64 t = tracks[ch];
              int64 s = t % 60l;
              t = t / 60l;
              minute = t % 60l;
              t = t / 60l;
              hour = t;
               
              mutable rstring timeasdf = "";
              if (hour < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) hour + ":";
              if (minute < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) minute + ":";
              if (s < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) s;
              
              //mutable rstring asdf = "been here since " + timeasdf + ". current time is " + time;
              if (alarmed[ch]) {

              } else {
                mutable int32 err = 0;
                mutable uint64 fp = fopen("ChildDetails.csv", "read", err);
                mutable rstring ph = "unknown";
                while (!feof(fp)) {
                  rstring contents = freadLine(fp, err);
                  list<rstring> token = csvTokenize(contents);
                  if (token[1] == ch) {
                    ph = token[4];
                    fclose(fp, err);
                    break;
                  }
                }
                submit({time=timeasdf, id=ch, phone=ph}, UnsafeRoomAlertStream);
                alarmed[ch] = true;
              }
            }
          }
        }          
    }

    stream<rstring time, rstring room, int32 children> RoomStatsStream = Custom(SensorDataStream) {
      logic
        state: {

          //TODO on other parts do I need to remove child from map when they exit the room?

          //map of room, map of childid, entry time
          mutable map<rstring, map<rstring, int64>> entries = {};
          //map of room, map of childid, exit time
          mutable map<rstring, map<rstring, int64>> exits = {};

          mutable int64 previous = -1l;
        }
        //SensorDataStream: <rstring time, rstring sensorid, rstring childid, rstring fromroom, rstring toroom>
        onTuple SensorDataStream : {

          //parse the time into its components
          mutable int64 hour = -1;
          mutable int64 minute = -1;
          mutable float64 second = -1;

          list<rstring> components = tokenize(time, ":", false);
          parseNumber(hour,components[0]);
          parseNumber(minute,components[1]);
          parseNumber(second,components[2]);

          mutable int64 current = hour*60l*60l + minute*60l + (int64) second;

          if (toroom in entries) {
            entries[toroom][childid] = current;
          } else {
            entries[toroom] = {childid:current};
          }
          if (fromroom in exits) {
            exits[fromroom][childid] = current;
          } else {
            exits[fromroom] = {childid:current};
          }
          //visited = (entered room in last hour) OR (exited room in last hour) OR (exit time is before enter time [never exited])

          if (previous == -1l) {
            previous = current;
          } else {
            if (current - previous > 60l*60l) {
              //output!
              //map of room, set<children>
              mutable map<rstring, set<rstring>> outputs = {};
              for (rstring rm in entries) {
                for (rstring ch in entries[rm]) {
                  if (entries[rm][ch] >= previous) {
                    //output
                    if (rm in outputs) {
                      insertM(outputs[rm], ch);
                    } else {
                      outputs[rm] = {ch};
                    }
                  }
             
                  //ch is in entries[rm] at this point

                  if (rm in exits && ch in exits[rm]) {
                    if (exits[rm][ch] < entries[rm][ch]) {

                      if (rm in outputs) {
                        insertM(outputs[rm], ch);
                      } else {
                        outputs[rm] = {ch};
                      }
                    }
                  } else {
                    if (rm in outputs) {
                      insertM(outputs[rm], ch);
                    } else {
                      outputs[rm] = {ch};
                    }
                  }
                }
              }
              for (rstring rm in exits) {
                for (rstring ch in exits[rm]) {
                  if (exits[rm][ch] >= previous) {
                    //output
                      if (rm in outputs) {
                      insertM(outputs[rm], ch);
                    } else {
                      outputs[rm] = {ch};
                    }
                  }
                }
              }

              mutable int64 t = current;
              int64 s = t % 60l;
              t = t / 60l;
              minute = t % 60l;
              t = t / 60l;
              hour = t;
               
              mutable rstring timeasdf = "";
              if (hour < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) hour + ":";
              if (minute < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) minute + ":";
              if (s < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) s;

              for (rstring rm in outputs) {
                mutable int32 lesize = size(outputs[rm]);
                if ("E" in outputs[rm]) {
                  lesize = lesize - 1;
                }
                submit({time=timeasdf, room=rm, children=lesize}, RoomStatsStream);
              }
              previous = current;
            } else {
              //nothing. just keep collecting.
            }
          }
        }          
    }

    stream<rstring time, rstring childid, int32 rooms> ChildStatsStream = Custom(SensorDataStream) {
      logic
        state: {

          //TODO on other parts do I need to remove child from map when they exit the room?

          //map of childid, map of room, entry time
          mutable map<rstring, map<rstring, int64>> entries = {};
          //map of chilid, map of room, exit time
          mutable map<rstring, map<rstring, int64>> exits = {};

          mutable int64 previous = -1l;
        }
        //SensorDataStream: <rstring time, rstring sensorid, rstring childid, rstring fromroom, rstring toroom>
        onTuple SensorDataStream : {

          //parse the time into its components
          mutable int64 hour = -1;
          mutable int64 minute = -1;
          mutable float64 second = -1;

          list<rstring> components = tokenize(time, ":", false);
          parseNumber(hour,components[0]);
          parseNumber(minute,components[1]);
          parseNumber(second,components[2]);

          mutable int64 current = hour*60l*60l + minute*60l + (int64) second;

          if (childid in entries) {
            entries[childid][toroom] = current;
          } else {
            entries[childid] = {toroom:current};
          }
          if (childid in exits) {
            exits[childid][fromroom] = current;
          } else {
            exits[childid] = {fromroom:current};
          }
          //visited = (entered room in last hour) OR (exited room in last hour) OR (exit time is before enter time [never exited])

          if (previous == -1l) {
            previous = current;
          } else {
            if (current - previous > 60l*60l) {
              //output!
              //map of childid, set<room>
              mutable map<rstring, set<rstring>> outputs = {};
              for (rstring ch in entries) {
                for (rstring rm in entries[ch]) {
                  if (entries[ch][rm] >= previous) {
                    //output
                    if (ch in outputs) {
                      insertM(outputs[ch], rm);
                    } else {
                      outputs[ch] = {rm};
                    }
                  }
             
                  //rm is in entries[ch] at this point

                  if (ch in exits && rm in exits[ch]) {
                    if (exits[ch][rm] < entries[ch][rm]) {

                      if (ch in outputs) {
                        insertM(outputs[ch], rm);
                      } else {
                        outputs[ch] = {rm};
                      }
                    }
                  } else {
                    if (ch in outputs) {
                      insertM(outputs[ch], rm);
                    } else {
                      outputs[ch] = {rm};
                    }
                  }
                }
              }
              for (rstring ch in exits) {
                for (rstring rm in exits[ch]) {
                  if (exits[ch][rm] >= previous) {
                    //output
                      if (ch in outputs) {
                      insertM(outputs[ch], rm);
                    } else {
                      outputs[ch] = {rm};
                    }
                  }
                }
              }

              mutable int64 t = current;
              int64 s = t % 60l;
              t = t / 60l;
              minute = t % 60l;
              t = t / 60l;
              hour = t;
               
              mutable rstring timeasdf = "";
              if (hour < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) hour + ":";
              if (minute < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) minute + ":";
              if (s < 10l) {
                timeasdf += "0";
              }
              timeasdf += (rstring) s;

              for (rstring ch in outputs) {
                mutable int32 lesize = size(outputs[ch]);
                if ("E" in outputs[ch]) {
                  lesize = lesize - 1;
                }
                submit({time=timeasdf, childid=ch, rooms=lesize}, ChildStatsStream);
              }
              previous = current;
            } else {
              //nothing. just keep collecting.
            }
          }
        }          
    }
    //dump output
    () as LocationLogSink = FileSink(LocationLogStream) {
      param file : "LocationLog.txt";
      format : csv;
    }
    () as MissingChildAlertSink = FileSink(MissingChildAlertStream) {
      param file : "MissingChildAlert.txt";
      format : csv;
    }
    () as UnsafeRoomAlertSink = FileSink(UnsafeRoomAlertStream) {
      param file : "UnsafeRoomAlert.txt";
      format : csv;
    }
    () as RoomStatsSink = FileSink(RoomStatsStream) {
      param file : "RoomStats.txt";
      format : csv;
    }
    () as ChildStatsSink = FileSink(ChildStatsStream) {
      param file : "ChildStats.txt";
      format : csv;
    }
}
