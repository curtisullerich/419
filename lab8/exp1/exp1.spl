
composite exp1 {
  graph 
    stream<rstring time, rstring callerid, rstring calleeid, rstring duration> LineStream = FileSource() { 
      param 
        format : csv;
        hasHeaderLine : false;
        defaultTuple : {time = "0", callerid="default", calleeid="default", duration="0" };
        file : getSubmissionTimeValue("file1");
    }
 
    stream<rstring time, rstring callerid, rstring calleeid, rstring duration> LineStream2 = FileSource() { 
      param 
        format : csv;
        hasHeaderLine : false;
        defaultTuple : {time = "0", callerid="default", calleeid="default", duration="0" };
        file : getSubmissionTimeValue("file2");
    } 

    stream<rstring time, rstring callerid, rstring calleeid, rstring duration> Uniond = Union(LineStream;LineStream2){}
   
    stream<rstring id, rstring letype> Output = Custom(Uniond) {
      logic
        state: {
          //type callerToCalleeWithCountMap = map<rstring, map<rstring, int64>>;
          //type hourToCallerWithCountMap = map<rstring, map<rstring, int64>>;
          //map<caller id, map<callee id, int count>>
          //map<hour, map<caller id, int count>>//of less than 10 
          //callertoCalleeWithCountMap abcounter;
          //hourToCallerWithCountMap ccounter;

          //caller id, <callee id, count>
          mutable map<rstring, map<rstring, int64>> ab = {};

          //hour, caller id, count>
          mutable map<int64, map<rstring, int64>> c = {};
          
        }
        onTuple Uniond : {
          mutable int64 hour = -1;
          mutable int64 minute = -1;
          mutable float64 second = -1;
          mutable float64 dur = -1;

          list<rstring> components = tokenize(time, ":", false);
          parseNumber(hour,components[0]);
          parseNumber(minute,components[1]);
          parseNumber(second,components[2]);
          parseNumber(dur,duration);

          if (callerid in ab) {
            if (calleeid in ab[callerid]) {
              ab[callerid][calleeid] = ab[callerid][calleeid] + 1l;
            } else {
              ab[callerid][calleeid] = 1l;
            }
          } else {
            ab[callerid] = {calleeid:1l};
          }
          //submit({id=callerid,letype=(rstring) second+"call"},Output);
          if (dur <= 10f) {
            
            if (hour in c) {
              if (callerid in c[hour]) {
                c[hour][callerid] = c[hour][callerid] + 1l; 
              } else {
                c[hour][callerid] = 1l;
              }
            } else {
              c[hour] = {callerid:1l};
            }
          }
//          submit({id=callerid, letype=calleeid}, Output);
        }          
        onPunct Uniond: {
          if (currentPunct() == Sys.FinalMarker) {
            mutable map<rstring, set<rstring>> results = {};
            for (rstring k in ab) {
              if(size(ab[k]) >= 30) {
                if (k in results) {
                  insertM(results[k], "B");
                } else {
                  results[k] = {"B"};
                }
              }

              mutable int64 sum = 0;
              for (rstring callee in ab[k]) {
                sum += ab[k][callee];
              }
              if(sum >= 35l) {
                if (k in results) {
                  insertM(results[k], "A");
                } else {
                  results[k] = {"A"};
                }
              }
            }            

            for (int64 hour in c) {
              for (rstring caller in c[hour]) {
                //if (c[hour][caller] > 1l){
                //submit({id=caller,letype=(rstring)c[hour][caller]}, Output);
                if (c[hour][caller] >= 10l) {
                  if (caller in results) {
                    insertM(results[caller], "C");
                  } else {
                    results[caller] = {"C"};
                  }
                }
              }
            }

            for (rstring caller in results) {
              mutable rstring line = "";

              if ("A" in results[caller]) {
                line += " A";
              }
              if ("B" in results[caller]) {
                line += " B";
              }
              if ("C" in results[caller]) {
                line += " C";
              }
              submit({id=caller, letype=line}, Output);
            }
          }
          
        }

    }

    () as File = FileSink(Output) {
      param file : "suspects.txt";
      format : csv;
    }
}
