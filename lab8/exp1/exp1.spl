composite exp1 {
  graph 
    //read in both files as CSVs
    stream<rstring time, rstring callerid, rstring calleeid, rstring duration> LineStream = FileSource() { 
      param 
        format : csv;
        hasHeaderLine : false;
        defaultTuple : {time = "0", callerid="default", calleeid="default", duration="0" };
        file : getSubmissionTimeValue("file1");
    }
 
    stream<rstring time, rstring callerid, rstring calleeid, rstring duration> LineStream2 = FileSource() { 
      param 
        format : csv;
        hasHeaderLine : false;
        defaultTuple : {time = "0", callerid="default", calleeid="default", duration="0" };
        file : getSubmissionTimeValue("file2");
    } 

    //union the two files
    stream<rstring time, rstring callerid, rstring calleeid, rstring duration> Uniond = Union(LineStream;LineStream2){}
   
    //Custom operator to detect types of suspects
    stream<rstring id, rstring letype> Output = Custom(Uniond) {
      logic
        state: {
          //map to store information about suspects of type a and b
          //caller id, <callee id, count>
          mutable map<rstring, map<rstring, int64>> ab = {};

          //map to store information about suspects of type c
          //hour, caller id, count>
          mutable map<int64, map<rstring, int64>> c = {};
        }

        onTuple Uniond : {

          //parse the time into its components
          mutable int64 hour = -1;
          mutable int64 minute = -1;
          mutable float64 second = -1;
          mutable float64 dur = -1;

          list<rstring> components = tokenize(time, ":", false);
          parseNumber(hour,components[0]);
          parseNumber(minute,components[1]);
          parseNumber(second,components[2]);
          parseNumber(dur,duration);


          //update the ab map
          if (callerid in ab) {
            if (calleeid in ab[callerid]) {
              ab[callerid][calleeid] = ab[callerid][calleeid] + 1l;
            } else {
              ab[callerid][calleeid] = 1l;
            }
          } else {
            ab[callerid] = {calleeid:1l};
          }

          //if this is a short call, stick it in the map
          if (dur <= 10f) {
            if (hour in c) {
              if (callerid in c[hour]) {
                c[hour][callerid] = c[hour][callerid] + 1l; 
              } else {
                c[hour][callerid] = 1l;
              }
            } else {
              c[hour] = {callerid:1l};
            }
          }
        }          


        onPunct Uniond: {
          if (currentPunct() == Sys.FinalMarker) {
            mutable map<rstring, set<rstring>> results = {};
            //recover all the actual results from the maps
            for (rstring k in ab) {
              if(size(ab[k]) >= 30) {
                if (k in results) {
                  insertM(results[k], "B");
                } else {
                  results[k] = {"B"};
                }
              }

              mutable int64 sum = 0;
              for (rstring callee in ab[k]) {
                sum += ab[k][callee];
              }
              if(sum >= 35l) {
                if (k in results) {
                  insertM(results[k], "A");
                } else {
                  results[k] = {"A"};
                }
              }
            }            

            for (int64 hour in c) {
              for (rstring caller in c[hour]) {
                //if (c[hour][caller] > 1l){
                //submit({id=caller,letype=(rstring)c[hour][caller]}, Output);
                if (c[hour][caller] >= 10l) {
                  if (caller in results) {
                    insertM(results[caller], "C");
                  } else {
                    results[caller] = {"C"};
                  }
                }
              }
            }

            for (rstring caller in results) {
              mutable rstring line = "";
              mutable boolean started = false;
              if ("A" in results[caller]) {
                line += "A";
                started = true;
              }
              if ("B" in results[caller]) {
                if (started) {
                  line += " ";
                }
                line += "B";
              }
              if ("C" in results[caller]) {
                if (started) {
                  line += " ";
                }
                line += "C";
              }
              submit({id=caller, letype=line}, Output);
            }
          }
        }
    }

    //dump output
    () as File = FileSink(Output) {
      param file : "suspects.txt";
      format : csv;
    }
}
